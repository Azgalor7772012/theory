Есть два вида приведения типа:
1) Неявный(implicit):
Выполняется автоматически компилятором, когда это возможно. Когда целевой тип шире исходного. То есть переводим
в тип, который больше по размеру, чем исходный. Компилятор сам неявно это делает и от нас никаких действий не нужно
Неявный перевод типа имеет следующий вид:

                char
                  |
byte -> short -> int -> long -> float -> double

Вот несколько примеров неявного приведения:

от int до long:
int num = 100;
long bigNum = num; // 100L

от long до double:
long bigNum = 100_000_000L;
double bigFraction = bigNum; // 100000000.0

от short до int:
short shortNum = 100;
int num = shortNum; // 100

от char до int:
char ch = '?';
int code = ch; // 63

2) Явный(explicit):
Может быть применен программистом, чтобы перевести больший тип данных к меньшему. Для этого
нужно создать другую переменную того же типа, d которую мы хотим привести первую переменную и к первой переменной
в скобках дописать тот тип, в который мы хотим ее перевести:

double num2 = 2.000003
long num1 = (long) num2; // 2

При этом такой подход сказывается на точности, т.к убирает информацию, которая не влезает из прошлого типа данных
в новый. Например если мы захотим перевести число long в int при этом оно превышает объем памяти, который есть
в int, то мы получим непонятное число в int:
long num1 = 100_000_000_000_00L;
int num2 = (int) num1; // 1316134912