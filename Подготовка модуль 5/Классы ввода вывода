Самые низкие уровни классов : java.io.InputStream , java.io.OutputStream

Java.io.inputStream - представляет поток байтов из которого можно читать по 1 байту или блоками
java.io.OutputStream - поток байтов в который можно писать
Оба класса абстрактные

Метода класса inputStream:
1) int .read() - возвращает следующий байт из входного потока и сдвигается дальше(3 раза вызвав read() -
получим 3 идущих подряд байта из потока). Когда конец потока достигнут вернется -1
2) int .read(byte b[]) - принимает массив байтов и считывает из потока количество байт, равное
размеру массива
3)int .read(byte b[] int off, int len) - массив, индекс элемента массива, начиная с которого этот массив
нужно начинать заполнять, количество байт, которое нужно считать из входного потока и записать в массив
Возвращенное значение int - фактическое количество считанных байтов. -1 - конец потока

4)long .skip(long n) - пропускает заданное количество байт, никуда их не сохраняя.
Возвращает количество байтов, которое удалось пропустить
5) .close() - закрывает поток

Методы класса outputStream:
1) void write(int b) - выводит в поток 1 байт, младшие 8 бит переданного значения int b
2)void write(byte b[]) - передает младшие 8 бит всех элементов массива
3) void write(byte b[], int off, int len) - передает указанное количество байт(int len) с указанного
элемента в массиве(int off)
4) void flush() - сбрасывает возможные промежуточные буфера.
5) .close() - закрывает поток.

-->Эти классы являются абстрактными, для работы с файлами предусмотрены следующие классы:
FileInputStream и FileOutputStream.
В конструктор они принимают строку с путем к файлу, либо экземпляр java.io.File
InputStream inputStream = new FileInputStream(new File("in.txt"));
InputStream inputStream = new FileOutputStream(new File("out.txt"));

Если у нас есть экземпляр класса Path, то можно получить поток с помощью:
InputStream inputStream = Files.newInputStream(Paths.get("in.txt");
InputStream inputStream = Files.newOutputStream(Paths.get("out.txt");


