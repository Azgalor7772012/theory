-->Всего в Java 4 побитовых оператора, каждый из которых перебирает все биты операнда
(числа, над которым выполняется операция) один за другим (побитово) и в результате выдает новое число.:
1) ~ (побитовое НЕ, инверсия, дополнение) — унарный оператор, инвертирующий биты числа в двоичном формате,
преобразуя каждый 0 в 1 и каждый 1 в 0. Он также изменяет бит знака значения.
2) | (побитовое ИЛИ) — это бинарный оператор, который возвращает значение, 1 если хотя бы одна цифра операнда равна 1,
 в противном случае он возвращает 0.
3) & (побитовое И) — это бинарный оператор, возвращающий значение, 1 если обе цифры операнда равны 1, иначе
результат равен 0.
4) ^ (побитовое исключающее ИЛИ) — это бинарный оператор, который возвращает значение, 1 если ровно один
операнд равен 1, в противном случае он возвращает 0.

Что это значит? Предположим есть 2 числа 15 (1111) и 10(1010) тогда:
int first = 15;  // binary format 1111
int second = 10; // binary format 1010

1.int bitwiseAnd = first & second; // 1111 & 1010 = 1010, the result is 10
& сравнивает у обоих операндов каждый бит и если они оба равны 1 - возвращает 1, если хоть один равено 0 -> возвращает 0

2.int bitwiseOr = first | second;  // 1111 | 1010 = 1111, the result is 15
| сравнивает у обоих операндов каждый бит и если хоть 1 бит у двух операндов равен 1 - возвращает 1, иначе 0

3.int bitwiseXor = first ^ second; // 1111 ^ 1010 = 0101, the result is 5
Если ровно 1 бит у двух операндов равен 1 возвращает 1 , иначе 0


-->Операторы сдвига(умножение/деление)
<< number - умножает число в двоичном формате на 2 в степени number
>> number - делит число в двоичном формате на 2 в степени number

Пример1:
int val = 25;   // binary: 0001 1001, decimal: 25

val = val << 1; // binary: 0011 0010, decimal: 50
val = val << 2; // binary: 1100 1000, decimal: 200

int anotherVal = 14;   // binary: 1110, decimal: 14
anotherVal = anotherVal >> 1; // binary: 0111, decimal: 7

Пример2:
int newVal = 25;

newVal = newVal << 1; // 25 * 2^1 = 50
newVal = newVal << 3; // 50 * 2^3 = 400
newVal = newVal >> 2; // 400 / 2^2 = 100

Пример3:
Вычислим среднее значение:
int left = 10;
int right = 20;

int mid = left + right >> 1; // this is 15!

Приоритет операций:

1) +, -,  ~ перед числом (т.е меняем его знак)
2) * / %
3) + -
4)Сдвиг: << >> >>> (т.к это тоже самое умножение/деление просто на 2 в степени)
5) Побитовое &
6) побитовое исключающее ИЛИ ^
7) побитовое включительно ИЛИ |