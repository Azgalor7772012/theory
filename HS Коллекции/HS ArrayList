ArrayList - коллекция Java(по факту класс библиотеки), реализующий динамический массив;
Работает он так же, как и обычный массив кроме одного - не может в себе хранить примитивные типы данных;

Чтобы начать использовать класс по его короткому имени, делаем импорт:

import java.util.ArrayList;
Рассмотрим несколько способов создания экземпляров этого класса.

1) Самый простой способ - использовать конструктор без аргументов:
ArrayList<String> list = new ArrayList<>();
Созданный список пуст, но его начальная емкость равна 10 (по умолчанию).

2) Мы также можем указать его начальную емкость:
ArrayList<String> list = new ArrayList<>(50);
Этот список пуст, но его начальная емкость установлена на 50.

3) Или можно построить, ArrayList, который состоит из элементов другого списка:
ArrayList<String> list = new ArrayList<>(anotherList);

--> Методы класса ArrayList:
1).size - метод определения размера коллекции, который возвращает количество элементов списка
2).get(index) - возвращает элемент на данном индексе в массиве
3).add(Object o) - добавляет переданный элемент в последнюю позицию коллекции;
4).add(int index, Object o) - добавляет переданный элемент в указанную позицию коллекции;
6).set(int index, Object o) - заменяет элемент, присутствующий по указанному индексу, на объект;
7).remove(Object o) - удаляет первое вхождение указанного элемента из этого списка, если он присутствует;
8).remove(int index) - удаляет элемент в указанной позиции в этом списке;
9).clear() - удаляет все элементы из коллекции.
Выше методы, присущие главному интерфейсу Collections. Ниже - методы только ArrayList:
10).addAll(Collection c) - добавляет к текущей коллекции другую коллекцию(по факту соединяет 2 массива)
11).contains(Object o) - проверяет есть ли в коллекции этот элемент;
12).indexOf(Object o) - возвращает индекс первого вхождение элемента, возвращает -1 если такого эл-та нет
12.1).lastIndexOf(Object o) - возвращает индекс последнего вхождения элемента, возвращает -1 если такого эл-та нет

->Сложность:
O(1) - константное время
1)Получение элемента по индексу - O(1)
2)Вставка элемента в конец списка - O(1)
3)Удаление элемента - O(N)
4)Вставка элемента в середину или начала списка - O(N)

->Помимо долгого удаления элементов и вставки в середину и конец списка в ArrayList также может быть
утечка памяти, связанная с тем, что размер массива нельзя уменьшить. После добавления 1млн элементов и
удаления 500тыс массив все также останется 1 млн, хотя элементов всего 500тыс