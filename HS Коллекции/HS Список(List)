-->List<E> (список) - интерфейс, который расширяют класса, работающие с массивами: ArrayList,
LinkedList. Создать объект интерфейса List<E> нельзя, только классы этого интерфейса.

Интерфейс List<E>представляет список как абстрактный тип данных. Он расширяет Collection<E>интерфейс,
приобретая его методы и добавляя несколько новых методов:
1. .set(int index, E element)заменяет элемент в указанной позиции в этом списке на указанный элемент и возвращает
элемент, который был заменен;
2. .get(int index)возвращает элемент в указанной позиции в списке;
3. .indexOf(Object obj)возвращает индекс первого вхождения элемента в список или -1если такого элемента нет;
4. .lastIndexOf(Object obj)возвращает индекс последнего вхождения элемента в список или -1если такого
элемента нет;
5. .subList(int fromIndex, int toIndex)возвращает подсписок этого списка от fromIndex включенного до
toIndex исключенного.

-->Способ создать список:
Самый простой способ создать список — вызвать of метод List интерфейса.
List<String> emptyList = List.of(); // 0 elements
List<String> names = List.of("Larry", "Kenny", "Sabrina"); // 3 elements
List<Integer> numbers = List.of(0, 1, 1, 2, 3, 5, 8, 13);  // 8 elements

Он возвращает НЕИЗМЕНЯЕМЫЙ(не динамический) список, содержащий либо все переданные элементы, либо пустой список.
Использование этого метода удобно при создании констант списка или тестировании некоторого кода.
Поскольку он неизменяем, работать будут только методы, не изменяющие элементы в списке. Другие вызовут исключение.


До Java 9 другим способом создания неизменяемых списков был следующий:
List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
Чтобы использовать его, класс java.util.Arrays должен быть импортирован.

--> Если есть неизменяемый список, мы можем взять из него изменяемую версию, используя следующий код:
List<String> immutableList = Arrays.asList("one", "two", "three");
List<String> mutableList = new ArrayList<>(immutableList);

--> Перебор элементов списка осуществляется как с обычным массивом.

List<String> names = List.of("Larry", "Kenny", "Sabrina");
1)Использование цикла «для каждого»:
for (String name : names) {
    System.out.println(name);
}
2) Использование индексов и size()метода:
for (int i = 0; i < names.size(); i += 2) {
    System.out.println(names.get(i));
}

--> Равенство списков - Два списка равны, если они содержат одни и те же элементы в одном и том же порядке.
Равенство не зависит от типов самих списков (ArrayList, LinkedList или чего-то еще).
Проверяется с помощью класса Objects и метода equals:
Objects.equals(List.of(1, 2, 3), List.of(1, 2, 3));    // true
Objects.equals(List.of(1, 2, 3), List.of(1, 3, 2));    // false
Objects.equals(List.of(1, 2, 3), List.of(1, 2, 3, 1)); // false

List<Integer> numbers = new ArrayList<>();

numbers.add(1);
numbers.add(2);
numbers.add(3);

Objects.equals(numbers, List.of(1, 2, 3)); // true