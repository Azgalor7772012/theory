-->Коллекции - служат для группировку элементов, как и массивы, НО:
1.При инициализации массива мы указываем его размер
2.Мы не можем добавить элемент в массив, если он заполнен
То есть массив - не динамический. В этот момент нам помогают Collections

Преимущества Коллекций:
1. Динамические(могут самостоятельно увеличивать, уменьшать размеры массива)
2. Богатый набор методов, которые уже реализованы за нас для взаимодействия с коллекциями

-->В Java есть несколько особенностей коллекций:
1.Они представлены разными классами из стандартной библиотеки Java.
2.Все современные коллекции являются универсальными типами. Как обычные дженерики, они могут хранить любые
ссылочные типы, включая классы, определенные нами (например, Person или что-то еще).
3.Коллекции не могут хранить примитивные типы данных(int, long, char etc) вместо этого могут хранить
их ссылочный аналог: Integer,Long etc
4.Коллекции могут быть изменяемыми (можно добавлять и удалять элементы) и неизменяемыми (это невозможно сделать).

-->Самый простой вид коллекции - ArrayList:
import java.util.ArrayList;
Он работает аналогично обычному массиву, но вам не нужно вручную изменять его размер, чтобы добавлять и
удалять элементы.

ArrayList<String> list = new ArrayList<>(); // Generics тип String

list.add("first");
list.add("second");
list.add("third");

System.out.println(list); // [first, second, third]

System.out.println(list.get(0)); // Используем метод .get т.к к элементам коллекций не обратиться по [];
System.out.println(list.get(1)); // second
System.out.println(list.get(2)); // third

list.remove("first");

System.out.println(list); // [second, third]

System.out.println(list.size()); // 2

--> Всего 2 корневых Дженерик интерфейса:
1)interface Collection <E>:
List<E> ; Set<E>; Queue<E>;  расширяют интерфейс Collection<E>
интерфейс SortedSet<E> расширяет интерфейс Set<E>
интерфейс Deque<E> расширяет интерфейс Queue<E>
2)Map<K,V> - представляет собой словарь(как в Питоне) K - key, V - value;
При этом Интерфейс Map не расширяет интерфейс Collection, они независимые.
интерфейс SortedMap расширяет интерфейс Map<K,V>;

Конкретно из интерфейсов создать объекты мы не можем, но у них есть реализации. Например, ArrayList класс,
который является реализацией массива с изменяемым размером интерфейса List<E>;

Также все коллекции делятся на 2 лагеря:
1. Изменяемые
2. Неизменяемые - при попытке вызвать методы .add / .remove / .clear - вызовут ошибку

--> Общие методы, предоставляемые Collection интерфейсом.
1)int size()возвращает количество элементов в этой коллекции;
2)boolean isEmpty()возвращает true, если эта коллекция не содержит элементов;
3)boolean contains(Object o)возвращает true, если эта коллекция содержит указанный элемент;
4)boolean add(E e)добавляет элемент в коллекцию. Возвращает true, если элемент был добавлен, иначе
возвращает false;
5)boolean remove("name of object") удаляет один экземпляр указанного элемента;
6)boolean removeAll(Collection<?> collection)удаляет из этой коллекции элементы, которые также
содержатся в указанной коллекции;
7)void clear()удаляет все элементы из этой коллекции.
