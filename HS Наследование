-->Наследование — это механизм, позволяющий создавать классы на основе других классов.
Класс , производный от другого класса, называется подклассом (он также известен как расширенный класс
или дочерний класс)

-->Для получения нового класса из другого используется ключевое слово extends:
class SuperClass { } //Класс родитель
//Дочерние классы:
class SubClassA extends SuperClass { }

class SubClassB extends SuperClass { }

class SubClassC extends SubClassA { }

-->Свойства наследования:
1)Класс может наследоваться только от одного суперкласса; То есть 2 класса родителя у 1 сабкласса быть не может!
2)Иерархия классов может иметь несколько уровней (класс C может расширять класс B, который расширяет
класс A);

Подкласс наследует все public и protected поля и методы от суперкласса. Подкласс также
может добавлять новые поля и методы.

Конструкторы не наследуются, но конструктор суперкласса может быть вызван из подкласса с помощью
специального ключевого слова super

Если класс объявлен с ключевым словом final, он вообще не может иметь подклассов.

final class SuperClass { }
//Пример наследования:
class Person {
    protected String name;
    protected int yearOfBirth;
    protected String address;

    // public getters and setters for all fields here
}

class Client extends Person {
    protected String contractNumber;
    protected boolean gold;

    // public getters and setters for all fields here
}

class Employee extends Person {
    protected Date startDate;
    protected Long salary;

    // public getters and setters for all fields here
}

class Programmer extends Employee {
    protected String[] programmingLanguages;

    public String[] getProgrammingLanguages() {
        return programmingLanguages;
    }

    public void setProgrammingLanguages(String[] programmingLanguages) {
        this.programmingLanguages = programmingLanguages;
    }
}

class Manager extends Employee {
    protected boolean smile;

    public boolean isSmile() {
        return smile;
    }

    public void setSmile(boolean smile) {
        this.smile = smile;
    }
}
То есть это сделано для удобства, чтобы снова не вписывать поля класса и его методы, если нам нужен
другой аналогичный класс, но с большим количеством полей и методов.

--> Для создания подкласса мы можем использовать либо ссылку на сам подкласс, либо ссылку на класс-родитель:
1. Person person = new Person(); // the reference is Person, the object is Person
Client client = new Client(); // the reference is Client, the object is Client
Либо 2. Person client = new Client(); // the reference is Person, the object is Client
        Person employee = new Employee(); // the reference is Person, the object is Employee

При этом при создание экземпляра класса родителя мы не можем использовать ссылку на сабкласс, как и
при создании объекта сабкласса мы не можем использовать ссылку на другой саб-класс того же класса-родителя:
Client whoIsIt = new Employee(); // it's impossible
Client client = new Person(); // it's impossible too
Но при этом способе мы не сможем пользоваться полями и доп.методами класса наследника, а сможем только
полями и методами класса родителя, поэтому зачем так делать хз.

-->То есть первая ссылка может быть классом-родителем. Получается ссылка может быть либо выше по иерархии,
чем объект вызова, либо мы ссылаемся на объект вызова.

--> Также при создание методов в дочернем классе, которые есть в классе Родителе, при вызове метода из
дочернего класса, его методы превалируют над методами класса родителя. Мы как бы переопределяем метод
родителя на свой собственный.

--> Из КАТЫ:
Классы наследники наследуют все поля и методы кроме тех, что отмечены модификаторами default-package и private;
При этом если классы в одном пакете, то у дочернего класса будут поля и методы default-package.

class User {

    private void sayHi() {
        System.out.println("Hello");
    }

    public static void main(String[] args) {
        Son son = new Son();
        // son.sayHi() - нет такого метода

        User user = new User();
        user.sayHi();
        // Ссылка на класс родитель - метод есть, хотя и объект дочернего класса
        User secondSon = new Son();
        secondSon.sayHi();
    }
}

class Son extends User {
}

-->Переопределение метода базового класса у дочернего класса:
1)Желательно написать аннотацию @Override, чтобы компилятор помогал нам в работе с этими методами
2)У переопределенного метода должны быть те же аргументы, что и у метода родителя
3)У переопределенного метода должен быть тот же тип возвращаемого значения, что и у метода родителя либо
тип подкласса возвращаемого значения
4)Модификатор доступа у переопределенного метода также может быть либо такой же, либо свободнее

-->При создании дочернего класса в конструкторе дочернего класса неявно вызывается базовый конструктор из
родительского класса. Если нам нужно принудительно вызвать его(например с какими-то параметрами), то
нам нужно сделать это с помощью ключевого слова super:
    public className() { // Конструктор дочернего класса
        super(16) //Вызываем конструктор родительского
    }
При этом вызов конструктора родительского класса должен идти первым действием
В конструкторе дочернего класса пишем super(args), в аргументах пишем аргументы, которые мы хотим передать
в конструктор родительского класса.

Также из дочернего класса можно вызвать методы родительского класса(если вдруг в дочернем мы их переопределили и хотим
вызвать именно метод родительского) с помощью все также ключевого слова super:
    @Override
    public StringBuilder append(String str) {
        super.append(str); //Если бы убрали super, то получилась бы бесконечная рекурсия
        return this;
    }

Использование ключевого слова super разрешено только в теле класса наследника, внешние пользователи не
могут управлять какую версию вызывать, всегда будет вызываться переопределенная версия
