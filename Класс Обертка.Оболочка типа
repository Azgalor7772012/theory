-->Если нам нужно использовать примитивный тип данных, как ссылочный, то мы можем использовать
ОБОЛОЧКУ ТИПА или ее еще называют Классы-обертки.

Их преимущество в том, что они имеют методы, т.к это классы, содержащиеся в стандартной библиотеке Java.
Например Integer.parseInt("25") Переводит строку в число.
Также мы используем класса обертки, для того, чтобы работать с коллекциями т.к коллекции не принимают
примитивные типы.
Еще один момент - в случае, если мы завернем число в класс обертку, то мы сможем дать ему значение
null, то есть ничего.

Если нам нужны просто примитивные данные, то создается переменная с примитивным типом данных, НЕ НУЖНО создавать объект
класса типо так Integer x = new Integer(25).
А вот если нам нужно какие-то методы из этого класса, то следует использовать методы этого класса. Они статические,
поэтому экземпляра класса не требуется.

-Рассмотрим их, слева примитивный тип данных, справа ссылочный аналог:
byte c -> Byte c;
shot s -> Short c;
int c -> Integer c;
long c -> Long c;
char c -> Character c;
float c -> Float c;
double c -> Double c;
boolean c -> Boolean c;

-->Ручная упаковка и распаковка:
Используются с помощью специальных методов классов-оберток:
Integer reference = Integer.valueOf(100); // boxing
int anotherPrimitive = reference.intValue();    // unboxing

--> Автоупаковка и автораспаковка(Боксинг/анбоксинг):
Java самостоятельно упаковывает и распаковывает примитивные данные из их классов обертков.
Если мы напишем Integer x = new Integer(123) , то Java подсветит это как лишнее действие, достаточно
написать Integer x = 123, Java сама неявно обернет это число.
То же самое с распаковкой, достаточно написать
int x = 123, чтобы теперь все то же число распаковать.

-->Не стоит забывать, что классы-оболочки это ссылочный тип данных, поэтому, чтобы сравнить какие-то значение
необходимо использовать метод .equals(value), а не ==. Т.к == проверяет ссылку на данные, а .equals(value) сами данные