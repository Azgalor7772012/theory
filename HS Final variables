-->Final variables(переменные константы) - переменные, которые нельзя изменить во время выполнения
программы, они на протяжении всей программы будут иметь одно и то же значение (компилятор выдаст
ошибку при попытке изменить значение final переменной или вывести ее, если она не назначена).
!У примитивных типов данных нельзя изменять значение, у Ссылочных - ссылку, поэтому у ссылочных типов
данных можно менять значение, хранящееся в куче, нельзя только менять ссылку на стеке.
--> Для объявления таких переменных есть ключевое слово final:

final double PI = 3.1415;
final String HELLO_MSG = "Hello";
System.out.println(PI); // 3.1415
System.out.println(HELLO_MSG); // Hello

Хорошей практикой является представление конечной переменной всеми заглавными буквами с
использованием символа подчеркивания для разделения слов.

-->В случае если мы назначаем final примитивный тип данных, то мы можем назначить другую переменную первой,
тогда эта переменная просто скопирует значение final переменной и создаст еще один блок памяти в стэке.
Новую переменную можно будет менять как угодно, т.к она не final:
final int count = 10;
int cnt = count;
cnt = 20; // no errors here, cnt is not final

-->В случае с ссылочными типами данных(напр.String), то здесь final становится не сам объект, а ссылка на
него, т.к сам объект хранится в хипе памяти и при назначение другой переменной того же значения, назначается
ссылка на объект памяти в хипе. В этом случае нельзя будет менять ссылку, но сам объект можно будет
изменить.

final StringBuilder builder = new StringBuilder();
builder = new StringBuilder(); // error line
В этом коде вторая строка не будет компилироваться, так как мы пытаемся переназначить ссылку на конечную
переменную builder.

--> Однако изменить сам объект вполне получается. Здесь мы добавили к классу StringBuilder строку Hello, тем
самым изменив объект в памяти heap, но ссылку не меняли, поэтому ошибки нет.
final StringBuilder builder = new StringBuilder(); // ""
builder.append("Hello!"); // it works
System.out.println(builder.toString()); // Hello!