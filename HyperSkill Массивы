-->Массив - Ссылочный тип данных состоящих из набора элементов ОДНОГО ТИПА. Это значит, что
при изменении массива в каком-либо методе, мы изменим массив во всей программе. Отличие ссылочных
типов от примитивных(если примитив передать в метод, то создастся его копия).

-->В Java массив имеет следующие важные особенности:
1)массив является ссылочным типом;
2)все элементы массива сохраняются в памяти последовательно;
3)к каждому элементу массива обращаются по его числовому индексу, первый элемент имеет индекс 0 ;
4)к последнему элементу обращаются по индексу, равному размеру массива – 1 ;
5)можно создать массив для хранения элементов любого типа.

-->Чтобы создать массив, заполненный элементами, мы должны:
1.объявить переменную типа массива (declaration);
2.создать экземпляр объекта массива (instantiation);
3.инициализировать массив некоторыми значениями (initialization)
При объявлении переменной мы определяем ее тип и имя. Создание экземпляра происходит, когда
для этого объекта выделяется память. Инициализация - когда мы помещаем определенные значения внутрь
массива.

-->Для объявления массива используются спец. символы []:
1.Показали тип массива, указали имя
int[] array; // declaration form 1
2. Его также можно использовать после имени переменной массива:
int array[]; // declaration form 2 используется реже

-->Размер массива не может быть больше максимального значения int;

--> Создание экземпляра объекта(instantiation):
Самый общий способ создать массив — использовать ключевое слово new
и указать необходимое количество элементов:
1. int[] numbers = new int[n];
Если мы создаем объект массива, но не инициализируем его элементы, то они становятся значениями
по умолчанию типа объекта(у нас выше int и значения по умолчанию 0)

2. Можно разделить на 2 строки:
int[] numbers; // declaration
numbers = new int[n]; // instantiation and initialization with default values

3.Также мы можем написать ключевое слово new и перечислить все элементы массива:
float[] floatNumbers; // declaration
floatNumbers = new float[] { 1.02f, 0.03f, 4f }; // instantiation and initialization

4. Самый простой способ создать и инициализировать массив — перечислить все его элементы:
int[] numbers = { 1, 2, 3, 4 };
4.1. Другой способ — инициализировать массив с помощью переменных:
int a = 1, b = 2, c = 3, d = 4;
int[] numbers = { a, b, c, d };


--> Чтобы получить длину массива есть метод arr.length();
int[] array = { 1, 2, 3, 4 }; // an array of numbers
int length = array.length; // number of elements of the array
System.out.println(length); // 4

-->Значения элементов массива можно изменить. Вы можете использовать индекс, чтобы
установить значение массива или получить значение из него.
Установить значение по индексу:
   array[index] = val;
Получить значение по индексу:
   val = array[index];

--> Цикл for-each:
for (type var : array) {
    //body
    type - тип переменной
    var - имя переменной, может быть любым
    array - исходный массив, который итерируем
}
Этот цикл имеет ограничения:
1)С помощью него нельзя изменить массив, т.к переменная которую мы используем(var) хранит не сам элемент
массива, а только его копию
2)Нельзя получить элемент по индексу
3)Мы итерируем каждый эл-т один за другим.

->varargs  - аргументы переменной длины. Эти аргументы обозначаются тремя точками после типа. В теле
метода можно обработать этот параметр как обычный массив указанного типа.
public static void printNumberOfArguments(int... numbers) {
    System.out.println(numbers.length);
}
Теперь можно вызвать метод, передавая несколько целых чисел или массив целых чисел.
Если метод имеет более одного параметра, vararg параметр должен быть последним в объявлении метода.

printNumberOfArguments(1);
printNumberOfArguments(1, 2);
printNumberOfArguments(1, 2, 3);
printNumberOfArguments(new int[] { }); // no arguments here
printNumberOfArguments(new int[] { 1, 2 });

--> The utility class Arrays
If you need to process arrays, you can import and use standard methods grouped
in the utility class Arrays.
Чтобы использовать класс Arrays, его нужно импортировать:
import java.util.Arrays;
C помощью класса Arrays можно:
1) Arrays.toString(array) - преобразовывает массив в строку
byte[] famousNumbers = { 0, 1, 2, 4, 8, 16, 32, 64 };
String arrayAsString = Arrays.toString(famousNumbers); // [0, 1, 2, 4, 8, 16, 32, 64]

1.2) Arrays.deepToString(array) - выдает в строке многомерные массивы.

2)Arrays.sort(array) - сортирует весь массив или его часть
long[] bigNumbers = { 200000000L, 400000000L, 100000000L, 300000000L }; // it's unsorted
Arrays.sort(bigNumbers); // sorting whole array
System.out.println(Arrays.toString(bigNumbers)); // [100000000, 200000000, 300000000, 400000000]

3)Arrays.equals(arr1, arr2) - Сравнивает 2 массива и выдает true/false в случаях если они равны/неравны.
Равными массивами являются массивы с одинаковыми элементами в одинаковом порядке. Сравнивает эл-ты
двух массивов только на первом уровне вложенности(отлично работает для 1-мерных массивов, но не для
многомерных)

4)Arrays.depEquals(arr1, arr2) - Сравнивает 2 массива, как и метод выше, но тут уже сравнивает и много-
мерные массивы.

4)Arrays.fill(arr, start, end, 'element') -Заполняет массив от старта до енда выбранным элементом
int size = 10;
char[] characters = new char[size];
// It takes an array, start index, end index (exclusive) and the value for filling the array
Arrays.fill(characters, 0, size / 2, 'A');
Arrays.fill(characters, size / 2, size, 'B');
System.out.println(Arrays.toString(characters)); // it prints [A, A, A, A, A, B, B, B, B, B]
