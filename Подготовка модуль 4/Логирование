Логирование - процесс записи каких-либо событий, которые происходят в коде.
Каждая запись лога содержит дату-время, уровень события, сообщение
https://habr.com/ru/post/130195/
JavaRush по логированию
https://javarush.ru/groups/posts/2388-logirovanie-chto-kak-gde-i-chem


Реализуется это с помощью библиотеки java.util.logging.*;
Создается логгер обычно в теле класса :
    public class Main {

        public static final Logger logger = Logger.getLogger(Main.class.getName())
        ....
    }
Здесь мы создали логгер и назвали его именем класса.


->Чтобы логгер записывал что-то по ходу программы у него есть методы:
logger.log(Level.INFO, "I'm logging")
1) 1 параметр - level - степень серьезности данного сообщения. Могут быть
SEVERE - серьезные ошибки программы
ERROR - ошибки программы
DEBUG - описывает событие конкретного момента
INFO - информационное сообщение о нормальном ходе исполнения программы
WARNING - предупреждения программы, CONFIG - конфигурационные программы
FINE,FINER,FINEST - мелкие действия программы, типо вход выход в метод, цикл и т.д.

2) 2-й параметр - сообщение, которое выдаст логгер

За место метода logger.log для каждого уровня серьезности есть свой отдельный метод:
logger.info("message")
logger.warning("message") etc.

-Настройка уровня логгера происходит либо в коде с помощью вызова метода logger.setLevel(Level.WARNING),
либо в конфигурационном файле.

-Чтобы передавать вместе с логгером динамическое сообщение используется 2 способы:
1)Конкатенировать все в строку:
logger.log(Level.FINEST, "Current value of X is " + x)
Но логгер в этом случае будет всегда обрабатывать строки, что не есть хорошо, поэтому придумали спец.символы
2) logger.log(Level.FINEST, "Current value of x is {0}", x}; за место 0 подставится х
Если хотим подставить несколько значений, то нужно передать новый массив объектов
logger.log(Level.FINES, "Point coordinates are ( {0}, {1} )", new Object[] {x, y})

-Также отдельно можно распечатать в логгер стектрейс исключения, тогда его просто нужно передать 3-им
параметром:
logger.log(Level.FINEST, "message", e);

-->Логгер не сам решает как именно он должен обрабатывать пришедшие сообщения. Он делегирует это решение другому
объекту - java.util.logging.Handler(хэндлеру).

Handler - абстрактный класс, у которого есть 3 наследника:
1)java.util.logging.ConsoleHandler - выводит сообщение в консоль
2)java.util.logging.FileHandler - записывает сообщение в файл
3)java.util.logging.SocketHandler - отправляет лог сообщения по сети.

Handler прикрепляется к логгеру с помощью вызова метода .addHandler();

-->java.util.logging.Formatter решает в каком формате записывается сообщение в лог.
Handler имеет ссылку на форматтер и делегирует ему работу по превращению окончательного сообщения
в пригодный вид для вывода в файл или передачи по сети.
2 реализации:
1)java.util.logging.SimpleFormatter - для человека
2)java.util.logging.XMLFormatter - машиночитаемый
