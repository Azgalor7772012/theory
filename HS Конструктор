-->Конструкторы — это специальные методы, которые инициализируют новый объект класса. Конструктор класса
вызывается при создании экземпляра с использованием ключевого слова new. Конструктор - это не вот эта строчка
со словом new
-->С помощью строчки Patient patient = new Patient(); создается экземпляр(объект) класса, а конструктор
содержится внутри этого класса и отвечает за назначение полей этого класса значениями при создании его объекта.

Конструктор похож внешне на метод, но он отличается от других методов тем, что:
1)Он имеет то же имя, что и класс, который его содержит;
2)У него нет возвращаемого типа (даже void).

Пример:
class Patient {  // Класс Patient

    String name;  // Поля этого класса
    int age;
    float height;

    public Patient(String name, int age, float height) {  //Конструктор этого класса с переменными
        this.name = name;
        this.age = age;
        this.height = height;
    }
}
При создании экземпляра класса нужно будет в скобках указать значения для его полей:
Patient patient1 = new Patient("Heinrich", 40, 182.0f);
Patient patient2 = new Patient("Mary", 33, 171.5f);

Теперь есть 2 объекта класса со своими полями.

--> В случае, если в классе не сделан конструктор,Компилятор автоматически предоставляет конструктор без
аргументов по умолчанию для любого класса без конструкторов, при этом этот неявный конструктор будет иметь модификатор
public.

class Patient {

    String name;
    int age;
    float height;
}
Мы можем создать экземпляр класса Patient, используя конструктор по умолчанию без аргументов:
Patient patient = new Patient();
В этом случае поля будут заполнены значениями по умолчанию для конкретных типов данных(int = 0; String = null etc)
При этом если мы назначим другой конструктор в классе, то конструктором по умолчанию мы пользоваться не сможем.

-->Также можно определить конструктор без каких-либо аргументов, но использовать его для установки
значений по  умолчанию для полей класса. Например, мы можем инициализировать name с помощью "Unknown":
class Patient {

    String name;
    int age;
    float height;

    public Patient() {
        this.name = "Unknown";
    }
}
Такие конструкторы полезны, если любое значение поля лучше, чем его значение по умолчанию.

--> Еще мы можем вызывать один конструктор с помощью другого конструктора при использовании ключевого слова this:
Важные моменты здесь в том, что, чтобы с помощью одного конструктора вызвать другой, метод this должен стоять на первом
месте в конструкторе(перед всеми другими действиями в конструкторе)
public class Robot {
    String name;
    String model;
    int lifetime;

    public Robot() {
        this.name = "Anonymous";
        this.model = "Unknown";
    }
    !!Конструктор, который вызываем другой конструктор.
    public Robot(String name, String model) {
        this(name, model, 20);  // Здесь мы передаем конструктору с данным типом и количеством аргументов наши параметры
        и внутри этого конструктора вызываем другой. При этом слово this используется как метод.
    }

    public Robot(String name, String model, int lifetime) {
        this.name = name;
        this.model = model;
        this.lifetime = lifetime;
    }
}

->Конструкторы не наследуются подклассами, но конструктор суперкласса может быть вызван из подкласса с
помощью ключевого слова super в скобках super(...):
При этом, если в нашем основном классе имеется конструктор, то наследуя этот класс, нам нужно либо:
1) Создать второй конструктор у родительского класса, который не принимает аргументов либо
2) В конструктор дочернего класса вставить super(...) и в скобках поля, необходимые для конструктора
родительского класса. Иначе будет ошибка компиляции
class Person {

    protected String name;
    protected int yearOfBirth;
    protected String address;

    public Person(String name, int yearOfBirth, String address) {
        this.name = name;
        this.yearOfBirth = yearOfBirth;
        this.address = address;
    }
}

class Employee extends Person {

    protected Date startDate;
    protected Long salary;

    public Employee(String name, int yearOfBirth, String address, Date startDate, Long salary) {
        super(name, yearOfBirth, address); // Вызываем конструктор родительского класса и передаем
        ему необходимые аргументы. Очень похоже на this(...), только this вызывает другой конструктор
        того же класса, а super родительский конструктор.

        this.startDate = startDate;
        this.salary = salary;
    }
}
Итого:
1)Любой класс Java имеет конструктор для инициализации объектов;
2)Конструктор имеет то же имя, что и содержащий его класс;
3)Конструктор не имеет возвращаемого типа, даже void; (Создается как: public nameOfConstructor();), при
этом имя конструктора должно совпадать с именем класса.
4)Если у класса нет явных конструкторов, компилятор Java автоматически предоставляет конструктор
по умолчанию без аргументов с модификатором public;
