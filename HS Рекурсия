->Рекурсия в программировании — это когда функция вызывает сама себя . У рекурсии есть случай,  когда
она завершается, и набор правил для сведения других случаев к первому случаю.

Рекурсия обычно медленнее и менее эффективно использует память , но экономит время разработчиков.
Так как если мы знаем, что методу нужно использовать самого себя, нам не нужно много времени тратить
на придумывания цикла, хотя цикл намного эффективнее т.к рекурсия чаще всего вызывает саму себя не 1 раз.
Почти всегда рекурсию можно заменить на цикл.

Пример рекурсии - вычисление факториала:
public static long factorial(long n) {
    if (n == 0 || n == 1) {
        return 1; // the trivial case
    } else {
        return n * factorial(n - 1); // Умножаем n на результат рекурсии
    }
}

->Типы рекурсий:
1) Прямая рекурсия. Метод вызывает сам себя подобно рассмотренному методу факториала.

2) Косвенная рекурсия. Метод вызывает другой метод, который вызывает исходный метод.

3) Хвостовая рекурсия. Вызов является хвостовой рекурсией, если после завершения вызова ничего не нужно
делать. Т.е. когда вызов возвращается, результат сразу же возвращается из вызывающего метода.
пример:
public static long factorialTailRecursive(long n, long accum) {
    if (n == 0) {
        return accum;
    }
    return factorialTailRecursive(n - 1, n * accum); // Сразу возвращает результат из рекурсии
}
И написать специальную обертку, чтобы вызывать его более удобным способом:

public static long factorial(long n) {
    return factorialTailRecursive(n, 1);
}

4) Множественная рекурсия. Метод вызывает себя рекурсивно несколько раз. Известный пример — вычисление
N-го числа Фибоначчи с помощью рекурсии.
пример:
public static int fib(int n) {
    if (n <= 1) {
        return n;
    }
    return fib(n - 1) + fib(n - 2); // Вызвали несколько раз
}