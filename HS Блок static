->Блок инициализации static - блок кода, заключенный в фигурные скобки с ключевым словом 'static':
static {
    // code
}
Используется этот блок внутри класса для инициализации статических полей и статических констант.
Блок статик похож на конструктор экземпляра, только мы создаем объект и ВЫЗЫВАЕМ СТАТИЧЕСКИЕ МЕТОДЫ В СТАТИ-
ЧЕСКОМ БЛОКЕ.

public class StaticInitBlockExample {

    private static String stringField;
    private static Date dateField;

    private static final String A_STRING_CONSTANT;

    static {
        stringField = getEmptyString();
        dateField = new Date();
        A_STRING_CONSTANT = "unknown";
    }

    private static String getEmptyString() {
        return "empty";
    }
}
То есть даже без создания экземпляра класса статические поля с помощью блока static будут назначены каким-то
значением ?

Класс может иметь несколько статических блоков, которые будут выполняться в том порядке, в котором они
написаны в коде. При этом прямое присвоение значений полям(то есть после создания когда мы пишем их значение
через равно) происходит перед присвоением через блок static:

public class StaticInitOrderExample {

    static int field = 30; // the first assignment

    static {
        field = 50; // the second assignment
    }
}
field будет равно 50.

-> в блоке static невозможно получить доступ к полям и методам экземпляра. При этом статический блок
выполняется один раз для всего класса, а не каждый раз для каждого экземпляра.

--> На подобие блока static для инициализации статических полей, есть блок для инициализации instance полей
и методов. Код этого блока записывается просто в { } скобках и вызывается Java перед вызовом конструктора
класса (то есть при создании экземпляра сначала вызывается блок инициализации экземпляра, а потом его
конструктор)

Здесь так же можно написать сколько угодно блоков инициализации экземпляров, будут они выполняться в том
же порядке, в котором написаны в программе.
!В блоке инициализации экземпляра можно получить доступ к статическим методам.