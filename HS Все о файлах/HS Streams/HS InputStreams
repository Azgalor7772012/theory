->Потоки - Способ получения и отдачи данных в/из Java, например посредством консоли,файлов, муз.файлов и т.д

ВХОДНЫЕ ПОТОКИ:
Все входные потоки начинаются с понятия "source" - место, откуда Java берет данные.

Входные потоки можно глобально разделить на 2 типа:
1)Character streams(JAVA IO READER CLASS) - получаем информацию, которая представлена символами. Если мы используем какой-то текстовый
файл, то легче использовать Character streams.

Класс Reader является оберткой над классом InputStream, поэтому в качестве аргумента при создании этого класса он принимает
объект класса InputStream

Есть много классов, позволяющих считывать информацию через символьный поток, например:
FileReader, CharArrayReader, StringReader etc.

Первое слово говорит какой тип данных поступает на поток, второе Reader, так как все эти классы расширяют класс
java.io.Reader
->У этих классов есть следующие методы:
1. .read() - читает один символ и возвращает либо число по юникоду, либо -1, если символа не было. int
2. .read(char[] charWithSymbols) - читает последовательность символов и передает в массив charWithSymbols. При этом
считывает ровно то количество символов, которое вмещает в себя массив. Т.е char[5] - прочитает 5 символов, а
char[15] - 15.Возвращает количество символов, которые были прочитаны, если не было прочитано ни 1 символа
возвращает -1. int
3. close() - метод, закрывающий поток. ОБЯЗАТЕЛЬНО!

-> Класс FileReader:
Читает информацию из файлов. Имеет след.конструкторы:
new FileReader(String fileName) - Создает экземпляр по имени файла
new FileReader(String fileName, Charset charset) - Создает экземпляр по имени файла, charset - в какой системе происходит кодирование. Например UTF-16
new FileReader(File file) - создает экземпляр по объекту класса file
new FileReader(File file, Charset charset)

Пример:
1. Чтение сразу всего файла
Reader reader = new FileReader("file.txt");

char first = (char) reader.read(); // i
char second = (char) reader.read(); // n

char[] others = new char[12];
int number = reader.read(others); // 10 . Аргументом принимает массив, куда записывать данные

others содержит ['p', 'u', 't', ' ', 's', 't', 'r', 'e', 'a', 'm', '\u0000', '\u0000'].
При этом массив вмещает 12 символов, а в файле было всего 12. Первые 2 забрали char first & char second, осталось 10
символов, массив вместил 10 и остались еще 2('\u0000', '\u0000'). Эти 2 символа - значения по умолчанию массива.

2. Чтение каждого символа, пока они не закончатся. То есть пока не вернется -1 у метода .read()
FileReader reader = new FileReader("file.txt");

int charAsNumber = reader.read();
while(charAsNumber != -1) {
    char character = (char) charAsNumber;
    System.out.print(character);
    charAsNumber = reader.read();
}
reader.close();

2)Byte Streams (INPUT STEAM CLASS) - получаем информацию, которая представлена в виде байтов. Использовать этот массив можно когда угодна,
т.к массив символов все равно приводится в итоге к байтам, т.к это низкоуровневый язык взаимодействия. Но лучше
использовать, когда дело имеем не с текстом, а с музыкальными файлами, картинками, зип файлами и т.д.

Сам класс InputStream - абстрактный, поэтому нам нужно использовать какую-то его реализацию.

Здесь также есть свои классы. Все они наследуются от класса java.io.inputStream. Это такие классы как:
ByteArrayInputStream - считывает байты из массивы байтов(byte[])
FileInputStream - предназначен для считывания байтов из файлов
AudioInputStream - предназначен для считывания байтов из аудиофайлов

Все классы имеют след.методы:
1. read() - считывает один байт. Возвращает -1, если байта нет, и значение по юникоду данного байта, если он есть.
2. read(byte[] b) - считывает байты в массив байтов и возвращает -1, если ничего не считал или кол-во считанных байтов
При этом макс.количество считанных байтов регулируется вместимостью массива
3. byte[] readAllBytes() - считывает все возможные байты и возвращает массив с ними
4. close() - ОБЯЗАТЕЛЬНО после завершения работы с потоком.

->Рассмотрим класс FileInputStream:
Имеет 2 конструктора:
new FileInputStream(String pathToFile) - создает экземпляр из пути к файлу
new FileInputStream(File file) - создает экземпляр класса из класса файла
FileInputStream inputStream = new FileInputStream("myfile.txt");

Пример:
FileInputStream inputStream = new FileInputStream("myfile.txt");
We are going to read the first five bytes:

byte[] bytes = new byte[5];
int numberOfBytes = inputStream.read(bytes);
System.out.println(numberOfBytes); // 5
inputStream.close();
 bytes = ['i', 'n', 'p', 'u', 't'].


*Заметка :
Чтобы закрыть потом ввода из консоли нужно нажать Cntrl + D после ввода.