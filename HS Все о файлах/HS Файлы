В Java есть класс File в пакете java.io. Объекты этого класса - существующие или несуществующие файлы/каталоги.

Самый простой способ создать файловый оьбъект - передать его строковый путь конструктору класса File:
File fileOnUnix = new File("/home/username/Documents");    // a directory on a UNIX-like system
File fileOnWin = new File("D:\\Materials\\java-materials.pdf"); // a file on Windows
При этом нужно учитывать, что у Windows используется \\, а у линукс /

->Абсолютный и относительный путь:
1)В этом случае используется АБСОЛЮТНЫЙ ПУТЬ к файлу. Абсолютный путь включает корневой элемент, в нашем случае
это диск D.
2)ОНОСИТЕЛЬНЫЙ ПУТЬ — это путь, который не включает корневой элемент файловой системы.
Этот путь всегда начинается с рабочего каталога. Рабочий каталог представлен точкой(.):
File fileOnUnix = new File("./images/picture.jpg");
File fileOnWin = new File("./images/picture.jpg");
Точку также можно опустить и не писать: File fileOnWin = new File("images/picture.jpg") тоже будет работать.
Здесь уже путь к файлу не зависит от операционной системы, что является предпочтительным т.к кроссплатформенность, все
дела. Принято использовать относительные пути везде, где это возможно.

Код будет работать, даже если файл или каталог фактически не существует в нашей файловой системе. Java не создает
новый файл или каталог, она просто представляет виртуальный файл или каталог, который в будущем может быть создан.

->Экземпляры класса File имеют следующие методы:
каталог здесь можно разценивать как папку.
1)File.getPath() возвращает строковый путь к этому файлу или каталогу (String);
2)File.getName()возвращает имя этого файла или каталога (только последнее имя пути) (String)
3)File.isDirectory() возвращает true, если это каталог и существует, иначе false;
4)File.isFile() возвращает true, если это существующий файл (не каталог), в противном случае false;
5)File.exists() возвращает true, если этот файл или каталог действительно существует в вашей файловой системе, иначе false;
6)File.getParent() возвращает строковый путь к родительскому каталогу, содержащему этот файл или каталог (String).

