-Вложенные классы - это классы, созданные в теле других классов.

Вложенные классы делятся на 2 категории:
1)Статические вложенные классы(static nested classes)
2)Нестатические вложенные классы(Non-static nested classes), которые в свою очередь делятся на:
2.1 Внутренние классы
2.2 Локальные классы
2.3 Анонимные классы

-->Внутренние классы - создаются просто в теле другого класса. Нужно это для архитектуры класса с точки
зрения конкретной программы.
Например есть класс велосипед, внутри него еще 2 класса - руль и сидение. Мы можем создать эти классы
и обычными, только смысл от этого теряется - руль и сидение без велосипеда бессмысленны.

Нужно знать:
1) Объект внутреннего класса не может существовать без объекта внешнего.
Чтобы создать объект внутреннего класса сначала нужно создать объект внешнего класса:
    Bicycle peugeot = new Bicycle("Peugeot", 120); // Объект внешнего класса
    Bicycle.HandleBar handleBar = peugeot.new HandleBar(); //Объект внутреннего класса
    peugeot.start(); // Метод внешнего класса
    handleBar.left(); // Метод внутреннего класса
Чтобы создать объект внутреннего класса мы сначала обращаемся к ссылке внешего класса, через точку
к ссылке внутреннего класса, название объекта и после через экземпляр внешнего класса с помощью
.new и ссылки на внутренний класс создаем объект внутреннего класса.

2) У Объекта внутреннего класса есть доступ к переменным внешнего, даже к private

3) Объект внутреннего класса нельзя создать в статическом методе внешнего

4)Объект внутреннего класса не может иметь статических полей и методов, но обычные может иметь.
Статические методы и поля могут вызываться без объекта класса, а нам чтобы обратиться к внутреннему
классу нужен минимум объект внешнего - несостыковка.

5)Внутренние классы, как и обычные, имеют модификаторы private, default, protected, public
public - мы можем создавать объект нашего внутреннего класса в любом другом, только для этого
должен быть создан и объект внешнего класса
private - доступ к созданию объекта класса будет только у внешнего класса.

-->Локальные классы - классы, объявленный в блоке кода внутри класса. Чаще всего внутри какого-то
метода внешнего класса, также в блоке инициализатора.
Это просто часть какой-то программы, ничего более, его не видно дальше этого метода, он выполнится и
дальше нигде использоваться не будет.

Нужно знать:
1)Локальный класс не видно дальше функции, в которой он был создан.
2)Локальный класс имеет доступ к локальным переменным(созданным внутри метода).
3)У локального класса есть доступ ко всем полям(даже приватным) и методам внешнего класса
4)локальный класс НЕ МОЖЕТ вмещать в себя статические поля, методы, классы

-->Анонимный класс - классы, которые не имеют имени и их создание происходит в момент инициализации объекта.
Мы пишем внутреннюю структуру таких классов в момент, когда создаем объект какого-то другого класса.
При этом мы не сможем повторно вызвать объект анонимного класса, только единожды.
Например:

    public interface MonitoringSystem {

        public void startMonitoring();
    }

    public class Main {

       public static void main(String[] args) {

           MonitoringSystem generalModule = new MonitoringSystem() { //
               @Override
               public void startMonitoring() {
                   System.out.println("Мониторинг общих показателей стартовал!");
               }
           };//Пишется ; т.к мы тут же создаем объект и пишем тело объекта

               MonitoringSystem errorModule = new MonitoringSystem() {
               @Override
               public void startMonitoring() {
                   System.out.println("Мониторинг отслеживания ошибок стартовал!");
               }
           };

           MonitoringSystem securityModule = new MonitoringSystem() {
               @Override
               public void startMonitoring() {
                   System.out.println("Мониторинг безопасности стартовал!");
               }
           };

           generalModule.startMonitoring();
           errorModule.startMonitoring();
           securityModule.startMonitoring();
       }
    }

Кажется будто мы создали объект интерфейса, на самом деле под капотом:
1)Создается безымянный Java-класс, реализующий интерфейс MonitoringSystem.
2)Компилятор, увидев такой класс, требует от тебя реализовать все методы интерфейса MonitoringSystem
(мы это и сделали 3 раза).
3)Создается один объект этого класса.

-Теперь мы можем обращаться к объектам анонимных классов, но создать дополнительные объекты тех же классов
не сможем

-Анонимный класс — это полноценный внутренний класс. Поэтому у него есть доступ к переменным внешнего класса,
в том числе к статическим и приватным.
-Есть у них кое-что общее и с локальными классами: они видны только внутри того метода, в котором
определены. В примере выше, любые попытки обратиться к объекту errorModule за пределами метода
main() будут неудачными.