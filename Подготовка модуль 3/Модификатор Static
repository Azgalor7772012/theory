-> Модификатор статик - модификатор, который делает элемент связанным на прямую с классом, а не с его
экземпляром.
Если поле статично, то оно принадлежит классу, если метод статичный - аналогично, при этом к нему можно
обращаться без создания экземпляра через имя_класса.Метод

-> Важные свойства модификатора static :
1) мы НЕ можем получить доступ к НЕ статическим членам класса, внутри статического контекста.
Например статический метод может обратиться только к статическим переменным/методам

2)В отличие от локальных переменных, статические поля и методы НЕ потокобезопасны(Thread-safe)

3)вы НЕ можете переопределять (Override) статические методы. Если вы объявите такой же метод в
классе-наследнике (subclass), т.е. метод с таким же именем и сигнатурой, вы лишь «спрячете» метод
суперкласса (superclass) вместо переопределения. Это явление известно как сокрытие методов (hiding methods)
это означает, что при обращении к статическому методу, который объявлен как в родительском, так и в
дочернем классе, во время компиляции всегда будет вызван метод исходя из типа переменной. В отличие
от переопределения, такие методы не будут выполнены во время работы программы. То есть не будет
позднего привязывания.


->Статическим классом может быть только внутренний класс. Этот класс привязан к внешнему классу, и
если внешний наследуется другим классом, то этот не будет наследован. При этом данный класс можно
наследовать, как и он может наследоваться от любого другого класса и имплементировать интерфейс.
При этом внутренний статический класс не содержит ссылку на создавший его объект внешнего класса,
благодаря этому статический класс наиболее похож на обычный не вложенный, ведь единственное различие
состоит в том, что он упакован в другой класс

-->Инициализатор - срабатывает до вызова конструктора. Есть статических и экземплярный.
Вызывается в теле класса.

   Экземплярный инициализатор:
    {
        km = 150;
    }
    Статический инициализатор:
    static {
        km = 150;
    }