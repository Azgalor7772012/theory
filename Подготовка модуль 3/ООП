-ООП - программирование, которое основано на объектах и их взаимодействии друг с другом.

-Приципы ООП:
1.Абстракиця
2.Инкапсуляция
3.Наследование
4.Полиморфизм

1)Абстракция - выделение наиболее важных характеристик и информации об объекте.

2)Инкапсуляция - базовый принцип ООП, при котором атрибуты и поведение объекта объединяются в одном
классе, внутренняя реализация объекта скрывается от пользователя, а для работы с объектом
предоставляется открытый интерфейс.

3)Наследование - создание классов на основе других классов / использование уже существующих классов для
описания новых
    При наследовании к классам потомкам передаются поля и метода класса-родителя с модификатором public + protected
-Можно запретить наследоваться, дав классу ключевое слово final
Если методу дать ключевое слово final, то его будет нельзя переопределить, но перегрузить можно.

4)Полиморфизм - способность функции работать с данными разных типов.
Есть 2 типа полиморфизма:
    1.Ad-hoc полиморфизм
    2.Параметрический(истинный) полиморфизм
1-Полиморфизм по запросу:
Приведение данных и перегрузка метода
2 - Параметрический:
Одна и та же функция может принимать параметром данные разных классов:
1.Параметр функции - базовый класс иерархии классов.
1)Статический - перегрузка метода.
На перегрузку методов влияют количество и типы параметров. Однако различие в типе возвращаемого
значения для перегрузки не имеют никакого значения.

2)Динамический - переопределение метода
Условия переопределение метода в дочернем классе:
    1.Метод производного класса должен иметь в точности тот же набор параметров, что и метод базового класса.
    2.Метод базового класса должен быть виден в производном классе.
    3.Тип, возвращаемый методом производного класса, должен совпадать или быть подклассом типа, возвращаемого
    методом базового класса
    4.Метод производного класса должен иметь модификатор доступа, такой же или более открытый, чем метод
    базового класса.

Один из видов полиморфизма - возможность обращаться к дочерним объектам через ссылку на родительский класс, при этом
у дочернего класса остаются только поля и методы родительского, но при этом методы работают как в дочернем, если
они переопределялись - это называется позднее связывание.



-Состояние объекта - поля(аргументы), поведение объекта - методы