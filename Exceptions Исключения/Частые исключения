Частые исключения и способы их решения:
1)Деление на 0 (ArithmeticException):
Проверяем знаменатель на ноль и выдаем в этом случае соответсвующее сообщение
int a = scanner.nextInt();
        int b = scanner.nextInt();

        if (b == 0) {
            System.out.println("Division by zero!");
        } else {
            System.out.println(a / b);
        }
        System.out.println("finished");

2)Преобразование числа из строки(NumberFormatException):
можно проверить входную строку с помощью Регулярного выражения.В случае, если ввод неверен, мы можем
вывести предупреждающее сообщение
if (input.matches("\\d+")) { // it checks if the input line contains only digits
    int number = Integer.parseInt(input);
    System.out.println(number + 1);
} else {
    System.out.println("Incorrect number: " + input);
}

3)NPE(Null Pointer Exception) встречается только у ссылочных типов, примитивам нельзя присвоить значение
null:
Решение простое - проверять равен ли элемент значению null:
int size = someString != null ? someString.length() : 0;

Также NPE может выскочить при сравнивании двух строк с помощью str1.equals(str2);
Чтобы ее избежать мы должны:
- Если одна строка не обладает переменной, а просто литерал, то от нее вызывать метод equals
String str1 = null
"abc".equals(str1) - без NPE
- Если обе строки назначены null, то есть вспомогательный класс java.util.Objects:
String str1 = null;
String str2 = null;
Objects.equals(str1,str2) - без NPE

4)Исключения массивов:
-NegativeArraySizeException - когда мы пытаемся создать массив с негативным размером
-ArrayIndexOutOfBoundsException - когда мы обращаемся к массиву по несуществующему индексу. Диапозон
массива - [0, length – 1].
if (index < 0 || index > hardCodedArray.length - 1) {
            System.out.println("The index is out of bounds.");
        } else {
            System.out.println(hardCodedArray[index]);
        }